{
    "openapi": "3.0.0",
    "info": {
        "title": "Unnamed Galvyn API",
        "version": "v0.0.0"
    },
    "paths": {
        "/api/v1/frontend/admin.json": {
            "get": {
                "summary": "Generate the openapi definition for the admin page",
                "description": "Generate the openapi definition for the admin page",
                "operationId": "openapi_admin",
                "responses": {}
            }
        },
        "/api/v1/frontend/club-admin.json": {
            "get": {
                "summary": "Generate the openapi definition for the club admin page",
                "description": "Generate the openapi definition for the club admin page",
                "operationId": "openapi_club_admin",
                "responses": {}
            }
        },
        "/api/v1/frontend/club-member.json": {
            "get": {
                "summary": "Generate the openapi definition for the club member page",
                "description": "Generate the openapi definition for the club member page",
                "operationId": "openapi_club_member",
                "responses": {}
            }
        },
        "/api/v1/frontend/common.json": {
            "get": {
                "summary": "Generate the openapi definition for the common",
                "description": "Generate the openapi definition for the common",
                "operationId": "openapi_common",
                "responses": {}
            }
        },
        "/api/v1/frontend/auth.json": {
            "get": {
                "summary": "Generate the openapi definition for the common",
                "description": "Generate the openapi definition for the common",
                "operationId": "openapi_auth",
                "responses": {}
            }
        },
        "/api/v1/frontend/invite/{uuid}": {
            "get": {
                "operationId": "get_invite_common",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetInvite"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/frontend/invite/{uuid}/accept": {
            "post": {
                "operationId": "accept_invite",
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AcceptInvite"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FormResult_for_Null_and_AcceptInviteError"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/frontend/common/me": {
            "get": {
                "operationId": "get_me",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Me"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AcceptInvite": {
                "description": "Accept an open invite",
                "type": "object",
                "properties": {
                    "password": {
                        "description": "The new password to set",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/MaxStr_72"
                            }
                        ]
                    }
                },
                "required": [
                    "password"
                ]
            },
            "AcceptInviteError": {
                "description": "Errors that can occur while accepting an invitation",
                "type": "object",
                "properties": {
                    "empty_password": {
                        "description": "Empty password was supplied",
                        "type": "boolean"
                    },
                    "expired": {
                        "description": "Invite has expired",
                        "type": "boolean"
                    }
                },
                "required": [
                    "empty_password",
                    "expired"
                ]
            },
            "ApiErrorResponse": {
                "description": "The response that is sent in a case of an error",
                "type": "object",
                "properties": {
                    "message": {
                        "description": "A human-readable error message.\n\nMay be used for displaying purposes",
                        "type": "string"
                    },
                    "status_code": {
                        "description": "The Status code for the error.\n\nImportant: Does not match http status codes",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApiStatusCode"
                            }
                        ]
                    }
                },
                "required": [
                    "message",
                    "status_code"
                ]
            },
            "ApiStatusCode": {
                "description": "The Status code that are returned throughout the API",
                "type": "integer",
                "enum": [
                    1000,
                    1001,
                    1002,
                    1003,
                    2000
                ]
            },
            "ClubUuid": {
                "description": "New-type for the primary key of the club",
                "type": "string",
                "format": "uuid"
            },
            "FormResult_for_Null_and_AcceptInviteError": {
                "description": "A `Result` with a custom serialization",
                "oneOf": [
                    {
                        "type": "object",
                        "properties": {
                            "result": {
                                "type": "string",
                                "enum": [
                                    "Ok"
                                ]
                            },
                            "value": {
                                "nullable": true
                            }
                        },
                        "required": [
                            "result",
                            "value"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "error": {
                                "$ref": "#/components/schemas/AcceptInviteError"
                            },
                            "result": {
                                "type": "string",
                                "enum": [
                                    "Err"
                                ]
                            }
                        },
                        "required": [
                            "error",
                            "result"
                        ]
                    }
                ]
            },
            "GetInvite": {
                "description": "API representation of an invitation",
                "type": "object",
                "properties": {
                    "created_at": {
                        "description": "The point in time the invite was created",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SchemaDateTime"
                            }
                        ]
                    },
                    "display_name": {
                        "description": "Display-name of the user",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/MaxStr_255"
                            }
                        ]
                    },
                    "expires_at": {
                        "description": "The point in time the invite expires",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SchemaDateTime"
                            }
                        ]
                    },
                    "link": {
                        "description": "Public link for accessing the invite",
                        "type": "string"
                    },
                    "username": {
                        "description": "Reserved username",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/MaxStr_255"
                            }
                        ]
                    },
                    "uuid": {
                        "description": "Primary key of the invite",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/InviteUuid"
                            }
                        ]
                    }
                },
                "required": [
                    "created_at",
                    "display_name",
                    "expires_at",
                    "link",
                    "username",
                    "uuid"
                ]
            },
            "InviteUuid": {
                "description": "Wrapper for the primary key of the [Invite]",
                "type": "string",
                "format": "uuid"
            },
            "MaxStr_255": {
                "type": "string",
                "maxLength": 255
            },
            "MaxStr_72": {
                "type": "string",
                "maxLength": 72
            },
            "Me": {
                "description": "Representation of the currently logged-in user.",
                "type": "object",
                "properties": {
                    "display_name": {
                        "description": "The user's display name.",
                        "type": "string"
                    },
                    "roles": {
                        "description": "The user's roles.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Roles"
                            }
                        ]
                    },
                    "username": {
                        "description": "The user's username.",
                        "type": "string"
                    },
                    "uuid": {
                        "description": "The user's UUID.",
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "required": [
                    "display_name",
                    "roles",
                    "username",
                    "uuid"
                ]
            },
            "Role": {
                "description": "The available roles of the manager",
                "oneOf": [
                    {
                        "description": "The admin of a club. Can manage users and settings of its club",
                        "type": "object",
                        "properties": {
                            "club": {
                                "$ref": "#/components/schemas/ClubUuid"
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "ClubAdmin"
                                ]
                            }
                        },
                        "required": [
                            "club",
                            "type"
                        ]
                    },
                    {
                        "description": "A member of a club.",
                        "type": "object",
                        "properties": {
                            "club": {
                                "$ref": "#/components/schemas/ClubUuid"
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "ClubMember"
                                ]
                            }
                        },
                        "required": [
                            "club",
                            "type"
                        ]
                    },
                    {
                        "description": "The super administrator. Has rights to manager clubs.",
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "SuperAdmin"
                                ]
                            }
                        },
                        "required": [
                            "type"
                        ]
                    }
                ]
            },
            "Roles": {
                "description": "The roles of a user.",
                "type": "object",
                "properties": {
                    "admins": {
                        "description": "The user's admin roles.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Role"
                        }
                    },
                    "member": {
                        "description": "The user's membership roles",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Role"
                        }
                    },
                    "super_admin": {
                        "description": "Whether the user is a super admin.",
                        "type": "boolean"
                    }
                },
                "required": [
                    "admins",
                    "member",
                    "super_admin"
                ]
            },
            "SchemaDateTime": {
                "example": "1970-01-01T00:00:00.0Z",
                "type": "string",
                "format": "date-time"
            }
        }
    }
}
