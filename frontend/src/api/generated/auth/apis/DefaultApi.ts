/* tslint:disable */
/* eslint-disable */
/**
 * Unnamed Galvyn API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  DiscoveryResponse,
  SignInRequest,
  TokenResponse,
} from '../models/index';

export interface AuthRequest {
    client_id?: string;
    nonce?: string | null;
    redirect_uri?: string;
    response_mode?: string | null;
    response_type?: string;
    scope?: string;
    state?: string | null;
}

export interface GetTokenRequest {
    code: string;
    grant_type: string;
    redirect_uri: string;
}

export interface SignInOperationRequest {
    SignInRequest?: SignInRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async authRaw(requestParameters: AuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['client_id'] != null) {
            queryParameters['client_id'] = requestParameters['client_id'];
        }

        if (requestParameters['nonce'] != null) {
            queryParameters['nonce'] = requestParameters['nonce'];
        }

        if (requestParameters['redirect_uri'] != null) {
            queryParameters['redirect_uri'] = requestParameters['redirect_uri'];
        }

        if (requestParameters['response_mode'] != null) {
            queryParameters['response_mode'] = requestParameters['response_mode'];
        }

        if (requestParameters['response_type'] != null) {
            queryParameters['response_type'] = requestParameters['response_type'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async auth(requestParameters: AuthRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authRaw(requestParameters, initOverrides);
    }

    /**
     */
    async discoveryRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscoveryResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/.well-known/openid-configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async discovery(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscoveryResponse> {
        const response = await this.discoveryRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async finishAuthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/finish-auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async finishAuth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.finishAuthRaw(initOverrides);
    }

    /**
     */
    async getTokenRaw(requestParameters: GetTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponse>> {
        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling getToken().'
            );
        }

        if (requestParameters['grant_type'] == null) {
            throw new runtime.RequiredError(
                'grant_type',
                'Required parameter "grant_type" was null or undefined when calling getToken().'
            );
        }

        if (requestParameters['redirect_uri'] == null) {
            throw new runtime.RequiredError(
                'redirect_uri',
                'Required parameter "redirect_uri" was null or undefined when calling getToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['code'] != null) {
            formParams.append('code', requestParameters['code'] as any);
        }

        if (requestParameters['grant_type'] != null) {
            formParams.append('grant_type', requestParameters['grant_type'] as any);
        }

        if (requestParameters['redirect_uri'] != null) {
            formParams.append('redirect_uri', requestParameters['redirect_uri'] as any);
        }

        const response = await this.request({
            path: `/api/v1/auth/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async getToken(requestParameters: GetTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponse> {
        const response = await this.getTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async jwksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/jwks.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async jwks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.jwksRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async signInRaw(requestParameters: SignInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/sign-in`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['SignInRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async signIn(requestParameters: SignInOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.signInRaw(requestParameters, initOverrides);
    }

    /**
     */
    async signOutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/sign-out`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async signOut(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.signOutRaw(initOverrides);
    }

}
