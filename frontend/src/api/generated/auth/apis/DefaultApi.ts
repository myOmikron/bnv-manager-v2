/* tslint:disable */
/* eslint-disable */
/**
 * Unnamed Galvyn API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  DiscoveryResponse,
  SignInRequest,
} from '../models/index';

export interface AuthRequest {
    client_id?: string;
    redirect_uri?: string;
    response_mode?: string;
    response_type?: string;
    scope?: string;
    state?: string | null;
}

export interface SignInOperationRequest {
    SignInRequest?: SignInRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async authRaw(requestParameters: AuthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['client_id'] != null) {
            queryParameters['client_id'] = requestParameters['client_id'];
        }

        if (requestParameters['redirect_uri'] != null) {
            queryParameters['redirect_uri'] = requestParameters['redirect_uri'];
        }

        if (requestParameters['response_mode'] != null) {
            queryParameters['response_mode'] = requestParameters['response_mode'];
        }

        if (requestParameters['response_type'] != null) {
            queryParameters['response_type'] = requestParameters['response_type'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async auth(requestParameters: AuthRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authRaw(requestParameters, initOverrides);
    }

    /**
     */
    async discoveryRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscoveryResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/.well-known/openid-configuration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async discovery(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscoveryResponse> {
        const response = await this.discoveryRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async finishAuthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/finish-auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async finishAuth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.finishAuthRaw(initOverrides);
    }

    /**
     */
    async signInRaw(requestParameters: SignInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/sign-in`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['SignInRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async signIn(requestParameters: SignInOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.signInRaw(requestParameters, initOverrides);
    }

    /**
     */
    async signOutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/sign-out`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async signOut(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.signOutRaw(initOverrides);
    }

}
