/* tslint:disable */
/* eslint-disable */
/**
 * Unnamed Galvyn API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  Club,
  CreateClubRequest,
  FormResultForClubUuidAndCreateClubError,
  PageForSimpleAccount,
  SimpleAccount,
} from '../models/index';

export interface CreateClubAdminRequest {
    CreateClubRequest?: CreateClubRequest;
}

export interface DeleteClubAdminRequest {
    uuid: string;
}

export interface GetClubAdminRequest {
    uuid: string;
}

export interface GetClubAdminsAdminRequest {
    uuid: string;
    limit?: number;
    offset?: number;
    search?: string | null;
}

export interface GetClubMembersAdminRequest {
    uuid: string;
    limit?: number;
    offset?: number;
    search?: string | null;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async createClubAdminRaw(requestParameters: CreateClubAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormResultForClubUuidAndCreateClubError>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/frontend/admin/clubs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['CreateClubRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async createClubAdmin(requestParameters: CreateClubAdminRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormResultForClubUuidAndCreateClubError> {
        const response = await this.createClubAdminRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteClubAdminRaw(requestParameters: DeleteClubAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling deleteClubAdmin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/frontend/admin/clubs/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteClubAdmin(requestParameters: DeleteClubAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteClubAdminRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllSuperadminsAdminRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SimpleAccount>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/frontend/admin/accounts/superadmins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async getAllSuperadminsAdmin(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SimpleAccount>> {
        const response = await this.getAllSuperadminsAdminRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getClubAdminRaw(requestParameters: GetClubAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Club>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling getClubAdmin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/frontend/admin/clubs/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async getClubAdmin(requestParameters: GetClubAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Club> {
        const response = await this.getClubAdminRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getClubAdminsAdminRaw(requestParameters: GetClubAdminsAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageForSimpleAccount>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling getClubAdminsAdmin().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/frontend/admin/clubs/{uuid}/admins`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async getClubAdminsAdmin(requestParameters: GetClubAdminsAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageForSimpleAccount> {
        const response = await this.getClubAdminsAdminRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getClubMembersAdminRaw(requestParameters: GetClubMembersAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageForSimpleAccount>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling getClubMembersAdmin().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/frontend/admin/clubs/{uuid}/members`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async getClubMembersAdmin(requestParameters: GetClubMembersAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageForSimpleAccount> {
        const response = await this.getClubMembersAdminRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getClubsAdminRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Club>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/frontend/admin/clubs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async getClubsAdmin(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Club>> {
        const response = await this.getClubsAdminRaw(initOverrides);
        return await response.value();
    }

}
