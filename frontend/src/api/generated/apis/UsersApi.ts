/* tslint:disable */
/* eslint-disable */
/**
 * Unnamed API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiErrorResponse,
  ChangeMeRequest,
  ChangePwRequest,
  FormResultForNullAndChangePwErrors,
  FullUserAdmin,
} from '../models/index';

export interface ChangePasswordRequest {
    ChangePwRequest: ChangePwRequest;
}

export interface UpdateMeRequest {
    ChangeMeRequest: ChangeMeRequest;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Change the password of the currently logged-in user  This may only be called by local users
     * Change the password of the currently logged-in user
     */
    async changePasswordRaw(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormResultForNullAndChangePwErrors>> {
        if (requestParameters['ChangePwRequest'] == null) {
            throw new runtime.RequiredError(
                'ChangePwRequest',
                'Required parameter "ChangePwRequest" was null or undefined when calling changePassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/frontend/v1/common/users/me/change-pw`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['ChangePwRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Change the password of the currently logged-in user  This may only be called by local users
     * Change the password of the currently logged-in user
     */
    async changePassword(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormResultForNullAndChangePwErrors> {
        const response = await this.changePasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the currently logged-in user
     * Retrieve the currently logged-in user
     */
    async getMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullUserAdmin>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/frontend/v1/common/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve the currently logged-in user
     * Retrieve the currently logged-in user
     */
    async getMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullUserAdmin> {
        const response = await this.getMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates the current user information
     * Updates the current user information
     */
    async updateMeRaw(requestParameters: UpdateMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['ChangeMeRequest'] == null) {
            throw new runtime.RequiredError(
                'ChangeMeRequest',
                'Required parameter "ChangeMeRequest" was null or undefined when calling updateMe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/frontend/v1/common/users/me`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['ChangeMeRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the current user information
     * Updates the current user information
     */
    async updateMe(requestParameters: UpdateMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateMeRaw(requestParameters, initOverrides);
    }

}
