/* tslint:disable */
/* eslint-disable */
/**
 * Unnamed API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AcceptInvitePwRequest,
  ApiErrorResponse,
  CreateUserInviteRequest,
  FormResultForCreateUserInviteResponseAndCreateUserInviteErrors,
  FullUserInvite,
} from '../models/index';

export interface AcceptInvitePwOperationRequest {
    uuid: string;
    AcceptInvitePwRequest: AcceptInvitePwRequest;
}

export interface CreateInviteRequest {
    CreateUserInviteRequest: CreateUserInviteRequest;
}

export interface GetUserInviteRequest {
    uuid: string;
}

/**
 * 
 */
export class UserInvitesApi extends runtime.BaseAPI {

    /**
     * Accept the invite with a password
     * Accept the invite with a password
     */
    async acceptInvitePwRaw(requestParameters: AcceptInvitePwOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling acceptInvitePw().'
            );
        }

        if (requestParameters['AcceptInvitePwRequest'] == null) {
            throw new runtime.RequiredError(
                'AcceptInvitePwRequest',
                'Required parameter "AcceptInvitePwRequest" was null or undefined when calling acceptInvitePw().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/frontend/v1/common/invites/{uuid}/accept-with-pw`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['AcceptInvitePwRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Accept the invite with a password
     * Accept the invite with a password
     */
    async acceptInvitePw(requestParameters: AcceptInvitePwOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.acceptInvitePwRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new invite for a user
     * Create a new invite for a user
     */
    async createInviteRaw(requestParameters: CreateInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormResultForCreateUserInviteResponseAndCreateUserInviteErrors>> {
        if (requestParameters['CreateUserInviteRequest'] == null) {
            throw new runtime.RequiredError(
                'CreateUserInviteRequest',
                'Required parameter "CreateUserInviteRequest" was null or undefined when calling createInvite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/frontend/v1/admin/user-invites`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['CreateUserInviteRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a new invite for a user
     * Create a new invite for a user
     */
    async createInvite(requestParameters: CreateInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormResultForCreateUserInviteResponseAndCreateUserInviteErrors> {
        const response = await this.createInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a single user invite
     * Retrieve a single user invite
     */
    async getUserInviteRaw(requestParameters: GetUserInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullUserInvite>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling getUserInvite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/frontend/v1/common/invites/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a single user invite
     * Retrieve a single user invite
     */
    async getUserInvite(requestParameters: GetUserInviteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullUserInvite> {
        const response = await this.getUserInviteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
