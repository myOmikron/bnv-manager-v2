/* tslint:disable */
/* eslint-disable */
/**
 * Frontend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddDomainToWebsiteRequest,
  ApiErrorResponse,
  CreateWebsiteRequest,
  FullWebsite,
  ListWebsites,
  UpdateWebsiteRequest,
  UuidSchema,
} from '../models/index';

export interface AddDomainToWebsiteOperationRequest {
    uuid: string;
    AddDomainToWebsiteRequest: AddDomainToWebsiteRequest;
}

export interface CheckDnsRequest {
    uuid: string;
}

export interface CreateWebsiteOperationRequest {
    CreateWebsiteRequest: CreateWebsiteRequest;
}

export interface DeleteWebsiteRequest {
    uuid: string;
}

export interface DeployWebsiteRequest {
    uuid: string;
}

export interface GetWebsiteRequest {
    uuid: string;
}

export interface RemoveDomainFromWebsiteRequest {
    domain_uuid: string;
    website_uuid: string;
}

export interface UpdateWebsiteOperationRequest {
    uuid: string;
    UpdateWebsiteRequest: UpdateWebsiteRequest;
}

/**
 * 
 */
export class WebsitesApi extends runtime.BaseAPI {

    /**
     * Add a domain to a website
     * Add a domain to a website
     */
    async addDomainToWebsiteRaw(requestParameters: AddDomainToWebsiteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UuidSchema>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling addDomainToWebsite().'
            );
        }

        if (requestParameters['AddDomainToWebsiteRequest'] == null) {
            throw new runtime.RequiredError(
                'AddDomainToWebsiteRequest',
                'Required parameter "AddDomainToWebsiteRequest" was null or undefined when calling addDomainToWebsite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/frontend/v1/websites/{uuid}/domains`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['AddDomainToWebsiteRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Add a domain to a website
     * Add a domain to a website
     */
    async addDomainToWebsite(requestParameters: AddDomainToWebsiteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UuidSchema> {
        const response = await this.addDomainToWebsiteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async checkDnsRaw(requestParameters: CheckDnsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UuidSchema>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling checkDns().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/frontend/v1/websites/{uuid}/check-dns`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     */
    async checkDns(requestParameters: CheckDnsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UuidSchema> {
        const response = await this.checkDnsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new website
     * Create a new website
     */
    async createWebsiteRaw(requestParameters: CreateWebsiteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UuidSchema>> {
        if (requestParameters['CreateWebsiteRequest'] == null) {
            throw new runtime.RequiredError(
                'CreateWebsiteRequest',
                'Required parameter "CreateWebsiteRequest" was null or undefined when calling createWebsite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/frontend/v1/websites`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['CreateWebsiteRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a new website
     * Create a new website
     */
    async createWebsite(requestParameters: CreateWebsiteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UuidSchema> {
        const response = await this.createWebsiteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a website
     * Delete a website
     */
    async deleteWebsiteRaw(requestParameters: DeleteWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling deleteWebsite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/frontend/v1/websites/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a website
     * Delete a website
     */
    async deleteWebsite(requestParameters: DeleteWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWebsiteRaw(requestParameters, initOverrides);
    }

    /**
     * Deploy the configuration to the webserver.  This will configure the webspace and request certificates for all added domains  Returns an uuid that will be used to send a notification via websocket when the deployment process has finished
     * Deploy the configuration to the webserver.
     */
    async deployWebsiteRaw(requestParameters: DeployWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UuidSchema>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling deployWebsite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/frontend/v1/websites/{uuid}/deploy`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Deploy the configuration to the webserver.  This will configure the webspace and request certificates for all added domains  Returns an uuid that will be used to send a notification via websocket when the deployment process has finished
     * Deploy the configuration to the webserver.
     */
    async deployWebsite(requestParameters: DeployWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UuidSchema> {
        const response = await this.deployWebsiteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all websites owned by this user
     * Retrieve all websites owned by this user
     */
    async getAllWebsitesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListWebsites>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/frontend/v1/websites`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve all websites owned by this user
     * Retrieve all websites owned by this user
     */
    async getAllWebsites(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListWebsites> {
        const response = await this.getAllWebsitesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a single website
     * Retrieve a single website
     */
    async getWebsiteRaw(requestParameters: GetWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullWebsite>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling getWebsite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/frontend/v1/websites/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a single website
     * Retrieve a single website
     */
    async getWebsite(requestParameters: GetWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullWebsite> {
        const response = await this.getWebsiteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a domain from a website
     * Remove a domain from a website
     */
    async removeDomainFromWebsiteRaw(requestParameters: RemoveDomainFromWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['domain_uuid'] == null) {
            throw new runtime.RequiredError(
                'domain_uuid',
                'Required parameter "domain_uuid" was null or undefined when calling removeDomainFromWebsite().'
            );
        }

        if (requestParameters['website_uuid'] == null) {
            throw new runtime.RequiredError(
                'website_uuid',
                'Required parameter "website_uuid" was null or undefined when calling removeDomainFromWebsite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/frontend/v1/websites/{website_uuid}/domains/{domain_uuid}`.replace(`{${"domain_uuid"}}`, encodeURIComponent(String(requestParameters['domain_uuid']))).replace(`{${"website_uuid"}}`, encodeURIComponent(String(requestParameters['website_uuid']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a domain from a website
     * Remove a domain from a website
     */
    async removeDomainFromWebsite(requestParameters: RemoveDomainFromWebsiteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeDomainFromWebsiteRaw(requestParameters, initOverrides);
    }

    /**
     * Update a website
     * Update a website
     */
    async updateWebsiteRaw(requestParameters: UpdateWebsiteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['uuid'] == null) {
            throw new runtime.RequiredError(
                'uuid',
                'Required parameter "uuid" was null or undefined when calling updateWebsite().'
            );
        }

        if (requestParameters['UpdateWebsiteRequest'] == null) {
            throw new runtime.RequiredError(
                'UpdateWebsiteRequest',
                'Required parameter "UpdateWebsiteRequest" was null or undefined when calling updateWebsite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/frontend/v1/websites/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters['uuid']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['UpdateWebsiteRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a website
     * Update a website
     */
    async updateWebsite(requestParameters: UpdateWebsiteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateWebsiteRaw(requestParameters, initOverrides);
    }

}
