/* tslint:disable */
/* eslint-disable */
/**
 * Frontend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DeployState } from './DeployState';
import {
    DeployStateFromJSON,
    DeployStateFromJSONTyped,
    DeployStateToJSON,
} from './DeployState';
import type { FullWebsiteDomain } from './FullWebsiteDomain';
import {
    FullWebsiteDomainFromJSON,
    FullWebsiteDomainFromJSONTyped,
    FullWebsiteDomainToJSON,
} from './FullWebsiteDomain';

/**
 * The full representation of a website
 * @export
 * @interface FullWebsite
 */
export interface FullWebsite {
    /**
     * The point in time the website was created
     * @type {Date}
     * @memberof FullWebsite
     */
    createdAt: Date;
    /**
     * 
     * @type {DeployState}
     * @memberof FullWebsite
     */
    deployState: DeployState;
    /**
     * A list of domains for this website
     * @type {Array<FullWebsiteDomain>}
     * @memberof FullWebsite
     */
    domains: Array<FullWebsiteDomain>;
    /**
     * The last time the website was deployed
     * @type {Date}
     * @memberof FullWebsite
     */
    lastDeployment?: Date;
    /**
     * Descriptive name of the website
     * @type {string}
     * @memberof FullWebsite
     */
    name: string;
    /**
     * The unique key of a website
     * @type {string}
     * @memberof FullWebsite
     */
    uuid: string;
}

/**
 * Check if a given object implements the FullWebsite interface.
 */
export function instanceOfFullWebsite(value: object): value is FullWebsite {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('deployState' in value) || value['deployState'] === undefined) return false;
    if (!('domains' in value) || value['domains'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('uuid' in value) || value['uuid'] === undefined) return false;
    return true;
}

export function FullWebsiteFromJSON(json: any): FullWebsite {
    return FullWebsiteFromJSONTyped(json, false);
}

export function FullWebsiteFromJSONTyped(json: any, ignoreDiscriminator: boolean): FullWebsite {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': (new Date(json['created_at'])),
        'deployState': DeployStateFromJSON(json['deploy_state']),
        'domains': ((json['domains'] as Array<any>).map(FullWebsiteDomainFromJSON)),
        'lastDeployment': json['last_deployment'] == null ? undefined : (new Date(json['last_deployment'])),
        'name': json['name'],
        'uuid': json['uuid'],
    };
}

export function FullWebsiteToJSON(value?: FullWebsite | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'created_at': ((value['createdAt']).toISOString()),
        'deploy_state': DeployStateToJSON(value['deployState']),
        'domains': ((value['domains'] as Array<any>).map(FullWebsiteDomainToJSON)),
        'last_deployment': value['lastDeployment'] == null ? undefined : ((value['lastDeployment'] as any).toISOString()),
        'name': value['name'],
        'uuid': value['uuid'],
    };
}

