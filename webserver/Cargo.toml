[package]
name = "webserver"
version = "0.1.0"
edition = "2024"
authors = ["Niklas Pfister <git@omikron.dev>"]
publish = false

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
# Error handling
thiserror = { version = "~2" }
anyhow = { version = "~1" }

# Webframework
tower = { version = "~0.5", features = ["limit"] }
tower-http = { version = "~0.6", features = ["trace", "limit"] }
galvyn = { git = "https://github.com/myOmikron/galvyn.git" }
schemars = { version = "~0.8", features = ["uuid1", "raw_value"] } # Derive json schema description

# Account authentication
webauthn-rs = { version = "~0.5", features = ["danger-allow-state-serialisation"] } # The feature is necessary as we want to save the state to a database
bcrypt = { version = "~0.17" }
rand = { version = "~0.8" }
jsonwebtoken = { version = "~9" }
rsa = { version = "~0.9", features = ["pem"] }
sha2 = { version = "0.10" }
base64ct = { version = "~1", features = ["std"] }

# Cli
clap = { version = "~4", features = ["derive"] }

# Logging
tracing = { version = "~0.1" } # Base API
tracing-forest = { version = "~0.2", features = ["smallvec", "ansi", "chrono"] }
tracing-subscriber = { version = "~0.3", features = ["tracing-log", "env-filter"] }
tracing-opentelemetry = { version = "0.25" }
opentelemetry = { version = "0.24" }
opentelemetry_sdk = { version = "0.24", features = ["rt-tokio"] }
opentelemetry-otlp = { version = "0.17" }

# Datatypes
uuid = { version = "~1", features = ["serde", "v4"] }
url = { version = "~2", features = ["serde"] }
time = { version = "~0.3" }

# Database
rorm = { version = "~0.7", default-features = false, features = ["time", "url", "cli", "uuid", "postgres-only"] }
# Custom DB enums
linkme = { version = "~0.3" }
strum = { version = "~0.27", features = ["derive"] }

# Async
tokio = { version = "~1", features = ["full"] }
futures-util = { version = "~0.3" }

# Serialization
serde = { version = "~1", features = ["derive"] }
serde_repr = { version = "~0.1" }
serde_json = { version = "~1" }


# Mailcow API
mailcow = { version = "*", path = "../mailcow" }